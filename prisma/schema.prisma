// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  steps         Steps[]
  meals         Meal[]
  current       CurrentMeal[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Steps {
  id          String @id @default(cuid())
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  count       Int
  date        String  @unique
  @@index([userId])
}

model Meal {
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String @unique
  totalCals   Int
  item1       String
  item2       String?
  item3       String?
  item4       String?
  item5       String?
  calories1   Int
  calories2   Int?
  calories3   Int?
  calories4   Int?
  calories5   Int?
  current     CurrentMeal[]
  @@index([userId])
}

model CurrentMeal {
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId],references: [id],onDelete: Cascade)
  mealName    String
  meal        Meal @relation(fields: [mealName], references: [name], onDelete: Cascade)

  @@index([userId])
  @@index([mealName])
}